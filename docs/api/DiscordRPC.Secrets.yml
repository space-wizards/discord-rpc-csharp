### YamlMime:ManagedReference
items:
- uid: DiscordRPC.Secrets
  commentId: T:DiscordRPC.Secrets
  id: Secrets
  parent: DiscordRPC
  children:
  - DiscordRPC.Secrets.CreateFriendlySecret(System.Random)
  - DiscordRPC.Secrets.CreateSecret(System.Random)
  - DiscordRPC.Secrets.Encoding
  - DiscordRPC.Secrets.JoinSecret
  - DiscordRPC.Secrets.MatchSecret
  - DiscordRPC.Secrets.SecretLength
  - DiscordRPC.Secrets.SpectateSecret
  langs:
  - csharp
  - vb
  name: Secrets
  nameWithType: Secrets
  fullName: DiscordRPC.Secrets
  type: Class
  source:
    id: Secrets
    path: ''
    startLine: 1472
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nThe secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc.\n<p>To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets.</p>\n<p>You should send discord data that someone else&apos;s game client would need to join or spectate their friend. If you can&apos;t or don&apos;t want to support those actions, you don&apos;t need to send secrets.</p>\n<p>Visit the <a href=\"https://discordapp.com/developers/docs/rich-presence/how-to#secrets\">Rich Presence How-To</a> for more information.</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class Secrets
    content.vb: >-
      <Serializable>

      Public Class Secrets
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DiscordRPC.Secrets.MatchSecret
  commentId: P:DiscordRPC.Secrets.MatchSecret
  id: MatchSecret
  parent: DiscordRPC.Secrets
  langs:
  - csharp
  - vb
  name: MatchSecret
  nameWithType: Secrets.MatchSecret
  fullName: DiscordRPC.Secrets.MatchSecret
  type: Property
  source:
    id: MatchSecret
    path: ''
    startLine: 1480
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nThe unique match code to distinguish different games/lobbies. Use <xref href=\"DiscordRPC.Secrets.CreateSecret(System.Random)\" data-throw-if-not-resolved=\"false\"></xref> to get an appropriately sized secret. \n<p>This cannot be null and must be supplied for the  Join / Spectate feature to work.</p>\n<p>Max Length of 128 Bytes</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This feature has been deprecated my Mason in issue #152 on the offical library. Was originally used as a Notify Me feature, it has been replaced with Join / Spectate.")]

      public string MatchSecret { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Obsolete("This feature has been deprecated my Mason in issue #152 on the offical library. Was originally used as a Notify Me feature, it has been replaced with Join / Spectate.")>

      Public Property MatchSecret As String
  overload: DiscordRPC.Secrets.MatchSecret*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: 'This feature has been deprecated my Mason in issue #152 on the offical library. Was originally used as a Notify Me feature, it has been replaced with Join / Spectate.'
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DiscordRPC.Secrets.JoinSecret
  commentId: P:DiscordRPC.Secrets.JoinSecret
  id: JoinSecret
  parent: DiscordRPC.Secrets
  langs:
  - csharp
  - vb
  name: JoinSecret
  nameWithType: Secrets.JoinSecret
  fullName: DiscordRPC.Secrets.JoinSecret
  type: Property
  source:
    id: JoinSecret
    path: ''
    startLine: 1500
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nThe secret data that will tell the client how to connect to the game to play. This could be a unique identifier for a fancy match maker or player id, lobby id, etc.\n<p>It is recommended to encrypt this information so its hard for people to replicate it. \nDo <strong>NOT</strong> just use the IP address in this. That is a bad practice and can leave your players vulnerable!\n</p>\n<p>Max Length of 128 Bytes</p>\n"
  example: []
  syntax:
    content: public string JoinSecret { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property JoinSecret As String
  overload: DiscordRPC.Secrets.JoinSecret*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DiscordRPC.Secrets.SpectateSecret
  commentId: P:DiscordRPC.Secrets.SpectateSecret
  id: SpectateSecret
  parent: DiscordRPC.Secrets
  langs:
  - csharp
  - vb
  name: SpectateSecret
  nameWithType: Secrets.SpectateSecret
  fullName: DiscordRPC.Secrets.SpectateSecret
  type: Property
  source:
    id: SpectateSecret
    path: ''
    startLine: 1519
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nThe secret data that will tell the client how to connect to the game to spectate. This could be a unique identifier for a fancy match maker or player id, lobby id, etc.\n<p>It is recommended to encrypt this information so its hard for people to replicate it. \nDo <strong>NOT</strong> just use the IP address in this. That is a bad practice and can leave your players vulnerable!\n</p>\n<p>Max Length of 128 Bytes</p>\n"
  example: []
  syntax:
    content: public string SpectateSecret { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property SpectateSecret As String
  overload: DiscordRPC.Secrets.SpectateSecret*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DiscordRPC.Secrets.Encoding
  commentId: P:DiscordRPC.Secrets.Encoding
  id: Encoding
  parent: DiscordRPC.Secrets
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: Secrets.Encoding
  fullName: DiscordRPC.Secrets.Encoding
  type: Property
  source:
    id: Encoding
    path: ''
    startLine: 1537
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nThe encoding the secret generator is using\n"
  example: []
  syntax:
    content: public static Encoding Encoding { get; }
    parameters: []
    return:
      type: System.Text.Encoding
    content.vb: Public Shared ReadOnly Property Encoding As Encoding
  overload: DiscordRPC.Secrets.Encoding*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: DiscordRPC.Secrets.SecretLength
  commentId: P:DiscordRPC.Secrets.SecretLength
  id: SecretLength
  parent: DiscordRPC.Secrets
  langs:
  - csharp
  - vb
  name: SecretLength
  nameWithType: Secrets.SecretLength
  fullName: DiscordRPC.Secrets.SecretLength
  type: Property
  source:
    id: SecretLength
    path: ''
    startLine: 1542
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nThe length of a secret in bytes.\n"
  example: []
  syntax:
    content: public static int SecretLength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property SecretLength As Integer
  overload: DiscordRPC.Secrets.SecretLength*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: DiscordRPC.Secrets.CreateSecret(System.Random)
  commentId: M:DiscordRPC.Secrets.CreateSecret(System.Random)
  id: CreateSecret(System.Random)
  parent: DiscordRPC.Secrets
  langs:
  - csharp
  - vb
  name: CreateSecret(Random)
  nameWithType: Secrets.CreateSecret(Random)
  fullName: DiscordRPC.Secrets.CreateSecret(System.Random)
  type: Method
  source:
    id: CreateSecret
    path: ''
    startLine: 1549
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nCreates a new secret. This is NOT a cryptographic function and should NOT be used for sensitive information. This is mainly provided as a way to generate quick IDs.\n"
  example: []
  syntax:
    content: public static string CreateSecret(Random random)
    parameters:
    - id: random
      type: System.Random
      description: The random to use
    return:
      type: System.String
      description: Returns a <xref href="DiscordRPC.Secrets.SecretLength" data-throw-if-not-resolved="false"></xref> sized string with random characters from <xref href="DiscordRPC.Secrets.Encoding" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function CreateSecret(random As Random) As String
  overload: DiscordRPC.Secrets.CreateSecret*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DiscordRPC.Secrets.CreateFriendlySecret(System.Random)
  commentId: M:DiscordRPC.Secrets.CreateFriendlySecret(System.Random)
  id: CreateFriendlySecret(System.Random)
  parent: DiscordRPC.Secrets
  langs:
  - csharp
  - vb
  name: CreateFriendlySecret(Random)
  nameWithType: Secrets.CreateFriendlySecret(Random)
  fullName: DiscordRPC.Secrets.CreateFriendlySecret(System.Random)
  type: Method
  source:
    id: CreateFriendlySecret
    path: ''
    startLine: 1566
  assemblies:
  - cs.temp.dll
  namespace: DiscordRPC
  summary: "\nCreates a secret word using more readable friendly characters. Useful for debugging purposes. This is not a cryptographic function and should NOT be used for sensitive information.\n"
  example: []
  syntax:
    content: public static string CreateFriendlySecret(Random random)
    parameters:
    - id: random
      type: System.Random
      description: The random used to generate the characters
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function CreateFriendlySecret(random As Random) As String
  overload: DiscordRPC.Secrets.CreateFriendlySecret*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DiscordRPC
  commentId: N:DiscordRPC
  name: DiscordRPC
  nameWithType: DiscordRPC
  fullName: DiscordRPC
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DiscordRPC.Secrets.CreateSecret(System.Random)
  commentId: M:DiscordRPC.Secrets.CreateSecret(System.Random)
  isExternal: true
- uid: DiscordRPC.Secrets.MatchSecret*
  commentId: Overload:DiscordRPC.Secrets.MatchSecret
  name: MatchSecret
  nameWithType: Secrets.MatchSecret
  fullName: DiscordRPC.Secrets.MatchSecret
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DiscordRPC.Secrets.JoinSecret*
  commentId: Overload:DiscordRPC.Secrets.JoinSecret
  name: JoinSecret
  nameWithType: Secrets.JoinSecret
  fullName: DiscordRPC.Secrets.JoinSecret
- uid: DiscordRPC.Secrets.SpectateSecret*
  commentId: Overload:DiscordRPC.Secrets.SpectateSecret
  name: SpectateSecret
  nameWithType: Secrets.SpectateSecret
  fullName: DiscordRPC.Secrets.SpectateSecret
- uid: DiscordRPC.Secrets.Encoding*
  commentId: Overload:DiscordRPC.Secrets.Encoding
  name: Encoding
  nameWithType: Secrets.Encoding
  fullName: DiscordRPC.Secrets.Encoding
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: DiscordRPC.Secrets.SecretLength*
  commentId: Overload:DiscordRPC.Secrets.SecretLength
  name: SecretLength
  nameWithType: Secrets.SecretLength
  fullName: DiscordRPC.Secrets.SecretLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DiscordRPC.Secrets.SecretLength
  commentId: P:DiscordRPC.Secrets.SecretLength
  isExternal: true
- uid: DiscordRPC.Secrets.Encoding
  commentId: P:DiscordRPC.Secrets.Encoding
  isExternal: true
- uid: DiscordRPC.Secrets.CreateSecret*
  commentId: Overload:DiscordRPC.Secrets.CreateSecret
  name: CreateSecret
  nameWithType: Secrets.CreateSecret
  fullName: DiscordRPC.Secrets.CreateSecret
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: DiscordRPC.Secrets.CreateFriendlySecret*
  commentId: Overload:DiscordRPC.Secrets.CreateFriendlySecret
  name: CreateFriendlySecret
  nameWithType: Secrets.CreateFriendlySecret
  fullName: DiscordRPC.Secrets.CreateFriendlySecret
